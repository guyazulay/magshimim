{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\nexport const getReadableSensors = () => [{\n  name: \"humidity\",\n  unit: \"%\",\n  title: \"Humidity\"\n}, {\n  name: \"temperature\",\n  unit: \"C\",\n  title: \"Temperature\"\n}, {\n  name: \"compass\",\n  unit: \"\",\n  title: \"Compass\"\n}, {\n  name: \"pressure\",\n  unit: \"bar\",\n  title: \"Pressure\"\n}];\n\nconst translateColor = (rgbArray = []) => \"rgb(\".concat(rgbArray[0], \",\").concat(rgbArray[1], \",\").concat(rgbArray[2], \")\");\n\nexport const getNormalizedColor = color => typeof color === \"string\" ? color : translateColor(color);\nexport const ERROR_MESSAGE = \"NO DATA\";\nexport const getEditableColors = () => [\"pink\", \"blue\", \"green\", \"yellow\", \"red\", \"white\"];","map":{"version":3,"sources":["/Users/guya/workspace/Magshimim/exercise/src/helpers.js"],"names":["React","useState","useEffect","useRef","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","getReadableSensors","name","unit","title","translateColor","rgbArray","getNormalizedColor","color","ERROR_MESSAGE","getEditableColors"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;AACzC,QAAMC,aAAa,GAAGJ,MAAM,EAA5B,CADyC,CAGzC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJyC,CAQzC;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASO,IAAT,GAAgB;AACZF,MAAAA,aAAa,CAACC,OAAd;AACH;;AACD,QAAIF,KAAK,KAAK,IAAd,EAAoB;AAChB,UAAII,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,KAAP,CAApB;AACA,aAAO,MAAMM,aAAa,CAACF,EAAD,CAA1B;AACH;AACJ,GARQ,EAQN,CAACJ,KAAD,CARM,CAAT;AASH;AAED,OAAO,MAAMO,kBAAkB,GAAG,MAAM,CACpC;AACIC,EAAAA,IAAI,EAAE,UADV;AAEIC,EAAAA,IAAI,EAAE,GAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CADoC,EAMpC;AACIF,EAAAA,IAAI,EAAE,aADV;AAEIC,EAAAA,IAAI,EAAE,GAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CANoC,EAWpC;AACIF,EAAAA,IAAI,EAAE,SADV;AAEIC,EAAAA,IAAI,EAAE,EAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAXoC,EAgBpC;AACIF,EAAAA,IAAI,EAAE,UADV;AAEIC,EAAAA,IAAI,EAAE,KAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAhBoC,CAAjC;;AAuBP,MAAMC,cAAc,GAAG,CAACC,QAAQ,GAAG,EAAZ,mBACZA,QAAQ,CAAC,CAAD,CADI,cACGA,QAAQ,CAAC,CAAD,CADX,cACkBA,QAAQ,CAAC,CAAD,CAD1B,MAAvB;;AAGA,OAAO,MAAMC,kBAAkB,GAAGC,KAAK,IACnC,OAAOA,KAAP,KAAiB,QAAjB,GACIA,KADJ,GAEIH,cAAc,CAACG,KAAD,CAHf;AAKP,OAAO,MAAMC,aAAa,GAAG,SAAtB;AAEP,OAAO,MAAMC,iBAAiB,GAAG,MAC7B,CACI,MADJ,EAEI,MAFJ,EAGI,OAHJ,EAII,QAJJ,EAKI,KALJ,EAMI,OANJ,CADG","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nexport const getReadableSensors = () => [\n    {\n        name: \"humidity\",\n        unit: \"%\",\n        title: \"Humidity\"\n    },\n    {\n        name: \"temperature\",\n        unit: \"C\",\n        title: \"Temperature\"\n    },\n    {\n        name: \"compass\",\n        unit: \"\",\n        title: \"Compass\"\n    },\n    {\n        name: \"pressure\",\n        unit: \"bar\",\n        title: \"Pressure\"\n    }\n]\n\nconst translateColor = (rgbArray = []) =>\n    `rgb(${rgbArray[0]},${rgbArray[1]},${rgbArray[2]})`\n\nexport const getNormalizedColor = color =>\n    typeof color === \"string\" ?\n        color :\n        translateColor(color)\n\nexport const ERROR_MESSAGE = \"NO DATA\"\n\nexport const getEditableColors = () =>\n    [\n        \"pink\",\n        \"blue\",\n        \"green\",\n        \"yellow\",\n        \"red\",\n        \"white\"\n    ]"]},"metadata":{},"sourceType":"module"}