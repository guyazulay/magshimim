{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\nexport const getReadableSensors = () => [{\n  name: \"humidity\",\n  unit: \"%\",\n  title: \"Humidity\"\n}, {\n  name: \"temperature\",\n  unit: \"C\",\n  title: \"Temperature\"\n}, {\n  name: \"compass\",\n  unit: \"\",\n  title: \"Compass\"\n}, {\n  name: \"pressure\",\n  unit: \"bar\",\n  title: \"Pressure\"\n}];\nexport const getNormalizedColor = color => typeof color === \"string\" ? color : \"white\";","map":{"version":3,"sources":["/Users/guya/workspace/Magshimim/solved/src/helpers.js"],"names":["React","useState","useEffect","useRef","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","getReadableSensors","name","unit","title","getNormalizedColor","color"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;AAC3C,QAAMC,aAAa,GAAGJ,MAAM,EAA5B,CAD2C,CAG3C;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJ2C,CAQ3C;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,aAASO,IAAT,GAAgB;AACdF,MAAAA,aAAa,CAACC,OAAd;AACD;;AACD,QAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAII,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,KAAP,CAApB;AACA,aAAO,MAAMM,aAAa,CAACF,EAAD,CAA1B;AACD;AACF,GARQ,EAQN,CAACJ,KAAD,CARM,CAAT;AASD;AAED,OAAO,MAAMO,kBAAkB,GAAG,MAAM,CACpC;AACIC,EAAAA,IAAI,EAAE,UADV;AAEIC,EAAAA,IAAI,EAAE,GAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CADoC,EAMpC;AACIF,EAAAA,IAAI,EAAE,aADV;AAEIC,EAAAA,IAAI,EAAE,GAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CANoC,EAWpC;AACIF,EAAAA,IAAI,EAAE,SADV;AAEIC,EAAAA,IAAI,EAAE,EAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAXoC,EAgBpC;AACIF,EAAAA,IAAI,EAAE,UADV;AAEIC,EAAAA,IAAI,EAAE,KAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAhBoC,CAAjC;AAyBP,OAAO,MAAMC,kBAAkB,GAAGC,KAAK,IACnC,OAAOA,KAAP,KAAiB,QAAjB,GACAA,KADA,GAEA,OAHG","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport const getReadableSensors = () => [\n    {\n        name: \"humidity\",\n        unit: \"%\",\n        title: \"Humidity\"\n    },\n    {\n        name: \"temperature\",\n        unit: \"C\",\n        title: \"Temperature\"\n    },\n    {\n        name: \"compass\",\n        unit: \"\",\n        title: \"Compass\"\n    },\n    {\n        name: \"pressure\",\n        unit: \"bar\",\n        title: \"Pressure\"\n    }\n]\n\n\n\nexport const getNormalizedColor = color => \n    typeof color === \"string\" ? \n    color :\n    \"white\"\n"]},"metadata":{},"sourceType":"module"}