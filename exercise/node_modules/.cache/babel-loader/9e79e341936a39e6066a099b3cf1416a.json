{"ast":null,"code":"import _slicedToArray from \"/Users/guya/workspace/Magshimim/solved/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/guya/workspace/Magshimim/solved/src/App/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from '../components/Header/Header';\nimport { getSensorsState } from \"../api\";\nimport { useInterval, getReadableSensors } from '../helpers';\nimport Sensor from '../components/Sensor/Sensor';\nimport LedMatrix from '../components/LedMatrix/LedMatrix';\nconst POLLING_PERIOD_TIME = 5000;\n\nconst App = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isActive = _useState2[0],\n        setIsActive = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        _useState4$ = _useState4[0],\n        sensors = _useState4$ === void 0 ? {} : _useState4$,\n        setSensors = _useState4[1];\n\n  useInterval(() => {\n    getSensorsState().then(({\n      data = {}\n    }) => {\n      setIsActive(true);\n      setSensors(data);\n    }).catch(error => {\n      setIsActive(false);\n    });\n  }, POLLING_PERIOD_TIME);\n  console.log(sensors);\n  return React.createElement(\"div\", {\n    className: \"App-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Header, {\n    isActive: isActive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"App-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Sensors, {\n    sensors: sensors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(LedMatrix, {\n    className: \"App-led-matrix\",\n    leds: sensors.led_array,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })));\n};\n\nconst Sensors = ({\n  sensors = {}\n}) => React.createElement(\"div\", {\n  className: \"App-sensors\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, getReadableSensors().map(({\n  title,\n  name,\n  unit\n}) => React.createElement(Sensor, {\n  title: title,\n  value: sensors[name] || \"\",\n  unit: unit,\n  className: \"App-sensors-sensor\",\n  valueClassName: name === \"compass\" && \"App-compass-value\",\n  unitClassName: name === \"temperature\" && \"App-temperature-unit\",\n  key: name,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n})));\n\nexport default App;","map":{"version":3,"sources":["/Users/guya/workspace/Magshimim/solved/src/App/App.js"],"names":["React","useState","useEffect","Header","getSensorsState","useInterval","getReadableSensors","Sensor","LedMatrix","POLLING_PERIOD_TIME","App","props","isActive","setIsActive","sensors","setSensors","then","data","catch","error","console","log","led_array","Sensors","map","title","name","unit"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAAQC,eAAR,QAA8B,QAA9B;AACA,SAASC,WAAT,EAAsBC,kBAAtB,QAAgD,YAAhD;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AAEA,MAAMC,mBAAmB,GAAG,IAA5B;;AAGA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,oBACeV,QAAQ,CAAC,KAAD,CADvB;AAAA;AAAA,QACVW,QADU;AAAA,QACAC,WADA;;AAAA,qBAEgBZ,QAAQ,CAAC,EAAD,CAFxB;AAAA;AAAA;AAAA,QAEVa,OAFU,4BAEF,EAFE;AAAA,QAEEC,UAFF;;AAGjBV,EAAAA,WAAW,CAAC,MAAI;AACZD,IAAAA,eAAe,GACdY,IADD,CACM,CAAC;AAACC,MAAAA,IAAI,GAAC;AAAN,KAAD,KAAa;AACfJ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,UAAU,CAACE,IAAD,CAAV;AACH,KAJD,EAKCC,KALD,CAKOC,KAAK,IAAG;AACXN,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH,KAPD;AAQH,GATU,EASTJ,mBATS,CAAX;AAUAW,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACI,SACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEF,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEE,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,gBAArB;AAAsC,IAAA,IAAI,EAAEA,OAAO,CAACQ,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CADJ;AASH,CAvBL;;AAyBI,MAAMC,OAAO,GAAG,CAAC;AAACT,EAAAA,OAAO,GAAC;AAAT,CAAD,KACZ;AAAK,EAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKR,kBAAkB,GAClBkB,GADA,CACI,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KACL,oBAAC,MAAD;AACI,EAAA,KAAK,EAAEF,KADX;AAEI,EAAA,KAAK,EAAEX,OAAO,CAACY,IAAD,CAAP,IAAiB,EAF5B;AAGI,EAAA,IAAI,EAAEC,IAHV;AAII,EAAA,SAAS,EAAC,oBAJd;AAKI,EAAA,cAAc,EAAED,IAAI,KAAK,SAAT,IAAsB,mBAL1C;AAMI,EAAA,aAAa,EAAEA,IAAI,KAAK,aAAT,IAA0B,sBAN7C;AAOI,EAAA,GAAG,EAAEA,IAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFC,CADL,CADJ;;AAiBJ,eAAehB,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Header from '../components/Header/Header';\nimport {getSensorsState} from \"../api\"\nimport { useInterval, getReadableSensors } from '../helpers';\nimport Sensor from '../components/Sensor/Sensor';\nimport LedMatrix from '../components/LedMatrix/LedMatrix';\n\nconst POLLING_PERIOD_TIME = 5000\n\n\nconst App = props => {\n    const [isActive, setIsActive] = useState(false)\n    const [sensors={}, setSensors] = useState({})\n    useInterval(()=>{\n        getSensorsState()\n        .then(({data={}})=>{\n            setIsActive(true)\n            setSensors(data)\n        })\n        .catch(error =>{\n            setIsActive(false)\n        })\n    },POLLING_PERIOD_TIME)\n    console.log(sensors)\n        return (\n            <div className=\"App-container\">\n                <Header isActive={isActive} />\n                <div className=\"App-content\">\n                    <Sensors sensors={sensors} />\n                    <LedMatrix className=\"App-led-matrix\" leds={sensors.led_array}/>\n                </div>\n            </div>\n        )\n    }\n\n    const Sensors = ({sensors={}}) => \n        <div className=\"App-sensors\">\n            {getReadableSensors()\n            .map(({title, name, unit}) =>\n            <Sensor \n                title={title}\n                value={sensors[name] || \"\"}\n                unit={unit}\n                className=\"App-sensors-sensor\"\n                valueClassName={name === \"compass\" && \"App-compass-value\"}\n                unitClassName={name === \"temperature\" && \"App-temperature-unit\"}\n                key={name}\n            />\n            )}\n        </div>\n    \n\nexport default App\n"]},"metadata":{},"sourceType":"module"}