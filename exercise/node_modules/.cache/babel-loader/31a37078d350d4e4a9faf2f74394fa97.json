{"ast":null,"code":"import _slicedToArray from \"/Users/guya/workspace/Magshimim/exercise/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/guya/workspace/Magshimim/exercise/src/App/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from '../components/Header/Header';\nimport { getSensorsStatePromise } from \"../api\";\nimport { useInterval, getReadableSensors } from '../helpers';\nimport Sensor from '../components/Sensor/Sensor';\nimport LedMatrix from '../components/LedMatrix/LedMatrix';\nconst POLLING_PERIOD_TIME = 1;\n\nconst App = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isActive = _useState2[0],\n        setIsActive = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        _useState4$ = _useState4[0],\n        sensors = _useState4$ === void 0 ? {} : _useState4$,\n        setSensors = _useState4[1]; // POLLING HERE\n\n\n  useInterval(() => {// Remember, when getting an error - isActive should be false, true otherwise.\n    // Here you can use getSensorsPromise\n  }, POLLING_PERIOD_TIME); // ??? == POLLING_PERIOD_TIME\n\n  return React.createElement(\"div\", {\n    className: \"App-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(Header, {\n    isActive: isActive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"App-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Sensors, {\n    sensors: sensors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(LedMatrix, {\n    className: \"App-led-matrix\",\n    leds: sensors.led_array,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n};\n\nconst Sensors = ({\n  sensors = {}\n}) => React.createElement(\"div\", {\n  className: \"App-sensors\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, getReadableSensors().map(sensor => // render a sensor\nnull));\n\nexport default App;","map":{"version":3,"sources":["/Users/guya/workspace/Magshimim/exercise/src/App/App.js"],"names":["React","useState","useEffect","Header","getSensorsStatePromise","useInterval","getReadableSensors","Sensor","LedMatrix","POLLING_PERIOD_TIME","App","isActive","setIsActive","sensors","setSensors","led_array","Sensors","map","sensor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,sBAAT,QAAuC,QAAvC;AACA,SAASC,WAAT,EAAsBC,kBAAtB,QAAgD,YAAhD;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AAEA,MAAMC,mBAAmB,GAAG,CAA5B;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACkBT,QAAQ,CAAC,KAAD,CAD1B;AAAA;AAAA,QACPU,QADO;AAAA,QACGC,WADH;;AAAA,qBAEqBX,QAAQ,CAAC,EAAD,CAF7B;AAAA;AAAA;AAAA,QAEPY,OAFO,4BAEG,EAFH;AAAA,QAEOC,UAFP,kBAGd;;;AACAT,EAAAA,WAAW,CAAC,MAAM,CACd;AACA;AACH,GAHU,EAGRI,mBAHQ,CAAX,CAJc,CAOU;;AACxB,SACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEE,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEE,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,gBAArB;AAAsC,IAAA,IAAI,EAAEA,OAAO,CAACE,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CADJ;AASH,CAjBD;;AAmBA,MAAMC,OAAO,GAAG,CAAC;AAAEH,EAAAA,OAAO,GAAG;AAAZ,CAAD,KACZ;AAAK,EAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKP,kBAAkB,GACdW,GADJ,CACQC,MAAM,IACP;AACA,IAHP,CADL,CADJ;;AASA,eAAeR,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Header from '../components/Header/Header';\nimport { getSensorsStatePromise } from \"../api\"\nimport { useInterval, getReadableSensors } from '../helpers';\nimport Sensor from '../components/Sensor/Sensor';\nimport LedMatrix from '../components/LedMatrix/LedMatrix';\n\nconst POLLING_PERIOD_TIME = 1;\n\nconst App = () => {\n    const [isActive, setIsActive] = useState(false)\n    const [sensors = {}, setSensors] = useState({})\n    // POLLING HERE\n    useInterval(() => {\n        // Remember, when getting an error - isActive should be false, true otherwise.\n        // Here you can use getSensorsPromise\n    }, POLLING_PERIOD_TIME) // ??? == POLLING_PERIOD_TIME\n    return (\n        <div className=\"App-container\">\n            <Header isActive={isActive} />\n            <div className=\"App-content\">\n                <Sensors sensors={sensors} />\n                <LedMatrix className=\"App-led-matrix\" leds={sensors.led_array} />\n            </div>\n        </div>\n    )\n}\n\nconst Sensors = ({ sensors = {} }) =>\n    <div className=\"App-sensors\">\n        {getReadableSensors()\n            .map(sensor =>\n                // render a sensor\n                null\n            )}\n    </div>\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}