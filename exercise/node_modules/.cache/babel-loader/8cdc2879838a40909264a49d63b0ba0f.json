{"ast":null,"code":"import _slicedToArray from \"/Users/guya/workspace/Magshimim/exercise/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/guya/workspace/Magshimim/exercise/src/App/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from '../components/Header/Header';\nimport { getSensorsState } from \"../api\";\nimport { useInterval, getReadableSensors } from '../helpers';\nimport Sensor from '../components/Sensor/Sensor';\nimport LedMatrix from '../components/LedMatrix/LedMatrix'; // const POLLING_PERIOD_TIME = 5000\n\nconst App = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isActive = _useState2[0],\n        setIsActive = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        _useState4$ = _useState4[0],\n        sensors = _useState4$ === void 0 ? {} : _useState4$,\n        setSensors = _useState4[1]; // POLLING HERE\n\n\n  useInterval(() => {// Remember, when getting an error - isActive should be false, true otherwise.\n    // Here you can use getSensorsPromise\n    // getSensorsState()\n    // .then(({data={}})=>{\n    //     setIsActive(true)\n    //     setSensors({...data})\n    // })\n    // .catch(error =>{\n    //     setIsActive(false)\n    // })\n  }, 5); // ??? == POLLING_PERIOD_TIME\n\n  return React.createElement(\"div\", {\n    className: \"App-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Header, {\n    isActive: isActive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"App-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Sensors, {\n    sensors: sensors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(LedMatrix, {\n    className: \"App-led-matrix\",\n    leds: sensors.led_array,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })));\n};\n\nconst Sensors = ({\n  sensors = {}\n}) => React.createElement(\"div\", {\n  className: \"App-sensors\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}, getReadableSensors().map(sensor => // render a sensor\nnull)); // const Sensors = ({sensors={}}) => \n// <div className=\"App-sensors\">\n//     {getReadableSensors()\n//     .map(({title, name, unit}) =>\n//     <Sensor \n//         title={title}\n//         value={sensors[name] || \"\"}\n//         unit={unit}\n//         className=\"App-sensors-sensor\"\n//         valueClassName={name === \"compass\" && \"App-compass-value\"}\n//         unitClassName={name === \"temperature\" && \"App-temperature-unit\"}\n//         key={name}\n//     />\n//     )}\n// </div>\n\n\nexport default App;","map":{"version":3,"sources":["/Users/guya/workspace/Magshimim/exercise/src/App/App.js"],"names":["React","useState","useEffect","Header","getSensorsState","useInterval","getReadableSensors","Sensor","LedMatrix","App","isActive","setIsActive","sensors","setSensors","led_array","Sensors","map","sensor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAAQC,eAAR,QAA8B,QAA9B;AACA,SAASC,WAAT,EAAsBC,kBAAtB,QAAgD,YAAhD;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,SAAP,MAAsB,mCAAtB,C,CAEA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACkBR,QAAQ,CAAC,KAAD,CAD1B;AAAA;AAAA,QACPS,QADO;AAAA,QACGC,WADH;;AAAA,qBAEmBV,QAAQ,CAAC,EAAD,CAF3B;AAAA;AAAA;AAAA,QAEPW,OAFO,4BAEC,EAFD;AAAA,QAEKC,UAFL,kBAGd;;;AACAR,EAAAA,WAAW,CAAC,MAAI,CACZ;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAZU,EAYT,CAZS,CAAX,CAJc,CAgBT;;AACD,SACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEK,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEE,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,gBAArB;AAAsC,IAAA,IAAI,EAAEA,OAAO,CAACE,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CADJ;AASH,CA1BL;;AA4BI,MAAMC,OAAO,GAAG,CAAC;AAACH,EAAAA,OAAO,GAAC;AAAT,CAAD,KACZ;AAAK,EAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKN,kBAAkB,GAClBU,GADA,CACIC,MAAM,IACP;AACA,IAHH,CADL,CADJ,C,CASJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAeR,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Header from '../components/Header/Header';\nimport {getSensorsState} from \"../api\"\nimport { useInterval, getReadableSensors } from '../helpers';\nimport Sensor from '../components/Sensor/Sensor';\nimport LedMatrix from '../components/LedMatrix/LedMatrix';\n\n// const POLLING_PERIOD_TIME = 5000\n\nconst App = () => {\n    const [isActive, setIsActive] = useState(false)\n    const [sensors={}, setSensors] = useState({})\n    // POLLING HERE\n    useInterval(()=>{\n        // Remember, when getting an error - isActive should be false, true otherwise.\n        // Here you can use getSensorsPromise\n\n        // getSensorsState()\n        // .then(({data={}})=>{\n        //     setIsActive(true)\n        //     setSensors({...data})\n        // })\n        // .catch(error =>{\n        //     setIsActive(false)\n        // })\n    },5) // ??? == POLLING_PERIOD_TIME\n        return (\n            <div className=\"App-container\">\n                <Header isActive={isActive} />\n                <div className=\"App-content\">\n                    <Sensors sensors={sensors} />\n                    <LedMatrix className=\"App-led-matrix\" leds={sensors.led_array}/>\n                </div>\n            </div>\n        )\n    }\n\n    const Sensors = ({sensors={}}) => \n        <div className=\"App-sensors\">\n            {getReadableSensors()\n            .map(sensor =>\n                // render a sensor\n                null\n            )}\n        </div>\n\n// const Sensors = ({sensors={}}) => \n// <div className=\"App-sensors\">\n//     {getReadableSensors()\n//     .map(({title, name, unit}) =>\n//     <Sensor \n//         title={title}\n//         value={sensors[name] || \"\"}\n//         unit={unit}\n//         className=\"App-sensors-sensor\"\n//         valueClassName={name === \"compass\" && \"App-compass-value\"}\n//         unitClassName={name === \"temperature\" && \"App-temperature-unit\"}\n//         key={name}\n//     />\n//     )}\n// </div>\n    \n\nexport default App\n"]},"metadata":{},"sourceType":"module"}