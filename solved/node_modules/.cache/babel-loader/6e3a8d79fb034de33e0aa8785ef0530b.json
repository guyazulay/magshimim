{"ast":null,"code":"import _slicedToArray from \"/Users/guya/workspace/Magshimim/solved/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/guya/workspace/Magshimim/solved/src/components/LedMatrix/LedMatrix.js\";\nimport React, { useState } from 'react';\nimport './LedMatrix.css';\nimport { getNormalizedColor, ERROR_MESSAGE } from '../../helpers';\nimport { updateLedColor } from \"../../api\";\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { grey } from '@material-ui/core/colors';\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    top: 36,\n    right: 0,\n    left: 0\n  },\n  fake: {\n    backgroundColor: grey[200],\n    height: theme.spacing(1),\n    width: \"300px\",\n    margin: theme.spacing(2),\n    // Selects every two elements among any group of siblings.\n    '&:nth-child(2n)': {\n      marginRight: theme.spacing(3)\n    }\n  }\n}));\n\nconst onLedClick = (index, selectedColor) => {\n  updateLedColor(index, selectedColor);\n};\n\nconst LedMatrix = ({\n  leds = [],\n  className\n}) => leds.length > 0 ? React.createElement(\"div\", {\n  className: \"LedMatrix \".concat(className),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, leds.map((color, index) => React.createElement(Led, {\n  color: getNormalizedColor(color),\n  index: index,\n  key: index,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}))) : React.createElement(\"div\", {\n  className: \"LedMatrix-error\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}, ERROR_MESSAGE);\n\nconst Led = ({\n  color = \"\",\n  index\n}) => {\n  const _useState = useState(() => index === 0 ? true : false),\n        _useState2 = _slicedToArray(_useState, 2),\n        open = _useState2[0],\n        setOpen = _useState2[1];\n\n  const classes = useStyles();\n  const fake = React.createElement(\"div\", {\n    className: classes.fake,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: \"LedMatrix-led-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"LedMatrix-led\",\n    style: color ? {\n      backgroundColor: color\n    } : {},\n    onClick: () => onLedClick(index, \"orange\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(ClickAwayListener, {\n    onClickAway: () => setOpen(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, open ? React.createElement(\"div\", {\n    style: {\n      width: \"300px\",\n      height: \"400px\",\n      zindex: 99999,\n      backgroundColor: \"black\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }) : null));\n};\n\nexport default LedMatrix;","map":{"version":3,"sources":["/Users/guya/workspace/Magshimim/solved/src/components/LedMatrix/LedMatrix.js"],"names":["React","useState","getNormalizedColor","ERROR_MESSAGE","updateLedColor","ClickAwayListener","Button","Paper","makeStyles","grey","useStyles","theme","paper","position","top","right","left","fake","backgroundColor","height","spacing","width","margin","marginRight","onLedClick","index","selectedColor","LedMatrix","leds","className","length","map","color","Led","open","setOpen","classes","zindex"],"mappings":"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","sourcesContent":["import React ,{useState} from 'react'\nimport './LedMatrix.css'\nimport { getNormalizedColor, ERROR_MESSAGE } from '../../helpers';\nimport {updateLedColor} from \"../../api\";\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n      position: 'absolute',\n      top: 36,\n      right: 0,\n      left: 0,\n    },    \n    fake: {\n        backgroundColor: grey[200],\n        height: theme.spacing(1),\n        width: \"300px\",\n        margin: theme.spacing(2),\n        // Selects every two elements among any group of siblings.\n        '&:nth-child(2n)': {\n          marginRight: theme.spacing(3),\n        },\n      },\n  }));\n\nconst onLedClick = (index, selectedColor) => {\n    updateLedColor(index, selectedColor)\n}\n\nconst LedMatrix = ({ leds=[] , className}) =>\n    leds.length > 0 ?\n    <div className={`LedMatrix ${className}`}>\n        {\n            \n            leds.map((color, index) =>\n            <Led color={getNormalizedColor(color)} index={index} key={index}/>\n            )\n        }\n    </div> :\n    <div className=\"LedMatrix-error\">\n        {ERROR_MESSAGE}\n    </div>\n\nconst Led = ({color=\"\", index}) => {\n    const [open, setOpen] = useState((()=>index===0?true:false));\n    const classes = useStyles();\n    const fake = <div className={classes.fake} />;\n    return (\n    <div className=\"LedMatrix-led-container\">\n        <div \n            className=\"LedMatrix-led\" \n            style={color ? {backgroundColor: color}: {}} \n            onClick={()=>onLedClick(index, \"orange\")}\n        />\n        <ClickAwayListener onClickAway={()=>setOpen(false)}>\n        {open ? \n        <div style={{width: \"300px\",height:\"400px\",zindex:99999,backgroundColor:\"black\"}}>\n        </div>\n        : null    \n        }\n        </ClickAwayListener>\n    </div>\n    \n)\n}\n    \n\nexport default LedMatrix"]},"metadata":{},"sourceType":"module"}