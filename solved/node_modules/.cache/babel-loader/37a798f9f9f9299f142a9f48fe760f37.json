{"ast":null,"code":"const sensors = {\n  humidity: \"38\",\n  temperature: \"28.2\",\n  pressure: \"150\",\n  compass: \"36\",\n  led_array: [\"yellow\", \"green\", \"red\", \"white\", \"pink\", \"blue\", \"\", \"\", \"yellow\", \"green\", \"red\", \"white\", \"pink\", \"blue\", \"\", \"\", \"yellow\", \"green\", \"red\", \"white\", \"pink\", \"blue\", \"\", \"\", \"yellow\", \"green\", \"red\", \"white\", \"pink\", \"blue\", \"\", \"\", \"yellow\", \"green\", \"red\", \"white\", \"pink\", \"blue\", \"\", \"\", \"yellow\", \"green\", \"red\", \"white\", \"pink\", \"blue\", \"\", \"\", \"yellow\", \"green\", \"red\", \"white\", \"pink\", \"blue\", \"\", \"\", \"yellow\", \"green\", \"red\", \"white\", \"pink\", \"blue\", \"\", \"\"]\n};\nexport const getSensorsState = () => {\n  //TBD: api call using axios\n  console.log(\"get state was called\");\n  const promise = new Promise((resolve, reject) => {\n    resolve({\n      data: sensors\n    });\n  });\n  return promise;\n};\nexport const updateLedColor = (index, color) => {\n  console.log(\"before\", sensors.led_array);\n  const promise = new Promise((resolve, reject) => {\n    sensors[\"led_array\"][index] = color;\n    console.log(\"after\", sensors.led_array);\n    resolve();\n  });\n  return promise;\n};","map":{"version":3,"sources":["/Users/guya/workspace/Magshimim/solved/src/api.js"],"names":["sensors","humidity","temperature","pressure","compass","led_array","getSensorsState","console","log","promise","Promise","resolve","reject","data","updateLedColor","index","color"],"mappings":"AAAA,MAAMA,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAE,IADE;AAEZC,EAAAA,WAAW,EAAC,MAFA;AAGZC,EAAAA,QAAQ,EAAE,KAHE;AAIZC,EAAAA,OAAO,EAAC,IAJI;AAKZC,EAAAA,SAAS,EAAE,CAAC,QAAD,EAAU,OAAV,EAAkB,KAAlB,EAAwB,OAAxB,EAAgC,MAAhC,EAAuC,MAAvC,EAA8C,EAA9C,EAAiD,EAAjD,EACC,QADD,EACU,OADV,EACkB,KADlB,EACwB,OADxB,EACgC,MADhC,EACuC,MADvC,EAC8C,EAD9C,EACiD,EADjD,EAEC,QAFD,EAEU,OAFV,EAEkB,KAFlB,EAEwB,OAFxB,EAEgC,MAFhC,EAEuC,MAFvC,EAE8C,EAF9C,EAEiD,EAFjD,EAGC,QAHD,EAGU,OAHV,EAGkB,KAHlB,EAGwB,OAHxB,EAGgC,MAHhC,EAGuC,MAHvC,EAG8C,EAH9C,EAGiD,EAHjD,EAIC,QAJD,EAIU,OAJV,EAIkB,KAJlB,EAIwB,OAJxB,EAIgC,MAJhC,EAIuC,MAJvC,EAI8C,EAJ9C,EAIiD,EAJjD,EAKC,QALD,EAKU,OALV,EAKkB,KALlB,EAKwB,OALxB,EAKgC,MALhC,EAKuC,MALvC,EAK8C,EAL9C,EAKiD,EALjD,EAMC,QAND,EAMU,OANV,EAMkB,KANlB,EAMwB,OANxB,EAMgC,MANhC,EAMuC,MANvC,EAM8C,EAN9C,EAMiD,EANjD,EAOC,QAPD,EAOU,OAPV,EAOkB,KAPlB,EAOwB,OAPxB,EAOgC,MAPhC,EAOuC,MAPvC,EAO8C,EAP9C,EAOiD,EAPjD;AALC,CAAhB;AAiBA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAC3CD,IAAAA,OAAO,CACH;AACIE,MAAAA,IAAI,EAAEb;AADV,KADG,CAAP;AAKH,GANe,CAAhB;AAQA,SAAOS,OAAP;AACH,CAZM;AAcP,OAAO,MAAMK,cAAc,GAAG,CAACC,KAAD,EAAOC,KAAP,KAAgB;AAC1CT,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,OAAO,CAACK,SAA9B;AACA,QAAMI,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAC3CZ,IAAAA,OAAO,CAAC,WAAD,CAAP,CAAqBe,KAArB,IAA8BC,KAA9B;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,OAAO,CAACK,SAA7B;AACAM,IAAAA,OAAO;AACV,GAJe,CAAhB;AAMA,SAAOF,OAAP;AACH,CATM","sourcesContent":["const sensors = {\n    humidity: \"38\",\n    temperature:\"28.2\",\n    pressure: \"150\",\n    compass:\"36\",\n    led_array: [\"yellow\",\"green\",\"red\",\"white\",\"pink\",\"blue\",\"\",\"\",\n                \"yellow\",\"green\",\"red\",\"white\",\"pink\",\"blue\",\"\",\"\",\n                \"yellow\",\"green\",\"red\",\"white\",\"pink\",\"blue\",\"\",\"\",\n                \"yellow\",\"green\",\"red\",\"white\",\"pink\",\"blue\",\"\",\"\",\n                \"yellow\",\"green\",\"red\",\"white\",\"pink\",\"blue\",\"\",\"\",\n                \"yellow\",\"green\",\"red\",\"white\",\"pink\",\"blue\",\"\",\"\",\n                \"yellow\",\"green\",\"red\",\"white\",\"pink\",\"blue\",\"\",\"\",\n                \"yellow\",\"green\",\"red\",\"white\",\"pink\",\"blue\",\"\",\"\"\n    ]\n}\n\n\nexport const getSensorsState = () => {\n    //TBD: api call using axios\n    console.log(\"get state was called\")\n    const promise = new Promise((resolve, reject)=>{\n        resolve(\n            {\n                data: sensors\n            }\n        )\n    })\n\n    return promise\n}\n\nexport const updateLedColor = (index,color) =>{\n    console.log(\"before\", sensors.led_array)\n    const promise = new Promise((resolve, reject)=>{\n        sensors[\"led_array\"][index] = color\n        console.log(\"after\", sensors.led_array)\n        resolve()\n    })\n\n    return promise\n}"]},"metadata":{},"sourceType":"module"}